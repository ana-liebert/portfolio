var Webflow = Webflow || [];
Webflow.push(function() {

    const isDesktop = window.innerWidth >= 992;
    const isTablet = 992 > window.innerWidth && window.innerWidth >= 768;
    const isMobile = 768 > window.innerWidth;


    // gsap.registerPlugin(GSDevTools, SplitText);

    const REFRESH_PRIORITIES = {
        'meet': 2000,
        'meet-after': 1950,

        'title_0': 1000,
        'proj_0': 980,
        'proj_1': 970,
        'proj_2': 960,
        'proj_3': 950,

        'title_1': 900,
        'title_2': 800,

        'forward': 750,

        'title_3': 700,
        'circles': 600,
        'cards': 500,

        'title_4': 400,
        'news': 350,
    };

    const ANIM_COOKIE_NAME = 'introPlayed';
    const HASHES = [
        'work-with-us',
	'meet-the-team',
        'case-studies',
        'experience',
	'leadership',
        'capabilities',
        'news',
    ];

    if (document.readyState === "complete") init();
    else window.addEventListener('load', init);

    function init() {
        var urlParams = new URLSearchParams(window.location.search);
        const forceIntro = urlParams.has('forceIntro');

        const shouldPlayIntro = (getCookie(ANIM_COOKIE_NAME) == null) || forceIntro;

        initIntro(shouldPlayIntro);

        initTitles();
        init__Meet();
        init__Projects();
        init__Forward();
        init__Different();
        init__News();

        setTimeout(initHashNav, 10, shouldPlayIntro);
    }

    function initIntro(shouldPlayIntro) {
        const S = $('.s-hp-intro');

        if (!shouldPlayIntro) {
	    $('body').css('overflow', 'auto');
	    S.hide();
	    setTimeout(function() {
		if (isDesktop || isTablet) {
			$('.show-sticky-nav').click();
		}
	    }, 150);
            return;
        }
        setCookie(ANIM_COOKIE_NAME, true, 7); // set cookie to expire in 7 days
        const wrap = S.find('.s-hp-intro__wrap');
        const bg = S.find('.hp-intro__bg');
        const arrows = S.find('.hp-intro__arrows > *');
        const arrowOutlines = S.find('.hp-intro__arrows .hp-hdr-arrow__line');
        const logo = S.find('.hp-intro__logo');
        const masker = S.find('.hp-intro__masker');

        const headerTitle = $('.hp-hdr__title');
        const headerTitleSplit = new SplitText(headerTitle, { type: 'words, lines', wordsClass: 'words', linesClass: 'lines' });
        gsap.set(headerTitle, { alpha: 0 });

        const VW = window.innerWidth / 100;

        const ARROW_SIZE = (isDesktop || isTablet) ? 6.2 * VW : 15 * VW;
        const ARROW_SPACING = (isDesktop || isTablet) ? 3.1 * VW : 4 * VW;

        const arrGapFrom = ARROW_SIZE * 1.4;
        const arrGapTo = ARROW_SIZE * .8;
        const newOriginX = (100 * VW - arrGapTo);
        const arrDistance = newOriginX + arrGapFrom;
        const MASKER_OFFSET = ARROW_SIZE * .8;

        gsap.set(arrows, { x: -arrGapFrom, rotateZ: 45, transformOrigin: '50% 50%' });
        gsap.set(arrowOutlines, { alpha: 0 });
        gsap.set(masker, { x: -100 * VW - arrGapFrom + MASKER_OFFSET });

        const arrowsHeader = $('.hp-hdr__arrows-wrap .hp-hdr-arrow').toArray();
        gsap.set(arrowsHeader, { alpha: 0 });

        // ___DEBUG___
        // gsap.set('.hp-intro__bg', { alpha: .7 });
        // gsap.set([arrows[11], arrows[12]], { alpha: .5 });
        // ___DEBUG___

        const tl = gsap.timeline();

        if (isDesktop || isTablet || isMobile) { // ---------------------------------------- Desktop
	    var delayInMilliseconds = 5700; //6 second until complete

            tl
                .add('start', .3)

                .from(logo, {
                    scale: 0,
                    duration: .5,
                    ease: 'quad.out',
                }, 'start')
                .to(masker, {
                    x: '+=' + arrDistance,
                    duration: .7,
                    ease: 'power2.out',
                }, '>')
                .to(arrows, {
                    x: '+=' + arrDistance,
                    duration: .7,
                    ease: 'power2.out',
                }, '<')
                .set([logo, masker], {
                    alpha: 0,
                }, '>')

                .add('move2', '>+=' + .0)

            arrows.each((i, arrow) => {
                const posX = 100 * VW - .5 * (ARROW_SPACING + ARROW_SIZE) * i;

                tl.to(arrow, {
                    x: posX,
                    // rotateZ: 0,
                    duration: 1.5,
                    ease: 'power2.out',
                }, 'move2');
            });

            const arrowsWidth = (ARROW_SPACING + ARROW_SIZE) * (arrows.length / 2 - 1); // substract due to shifting of eodds into evens
            const arrowsWidth2 = newOriginX - (100 * VW - .5 * (ARROW_SPACING + ARROW_SIZE) * arrows.length);
            const centerOffs = (100 * VW - arrowsWidth) / 2;
            const shift = -centerOffs + arrGapTo;

            tl.to('.hp-intro__arrows', {
                x: '+=' + shift,
                duration: 1.5,
                ease: 'power2.out',
            }, 'move2')

            tl.add('move3', '>+=' + .1)

            const spares = [];
            arrows.each((i, arrow) => {
                if (i % 2 == 1) return;

                const offX = .5 * (ARROW_SPACING + ARROW_SIZE);

                tl.to(arrow, {
                    x: '+=' + offX,
                    duration: .5,
                    ease: 'quad.out',
                }, 'move3');

                spares.push(arrow);
            });

            const arrowsFinal = [arrows[9], arrows[11], arrows[13], arrows[15]].reverse();
            const arrowsNA = arrows.toArray().filter(arrow => (!arrowsFinal.includes(arrow)));

            tl
                .set(arrowOutlines, { alpha: 1 })
                .set(spares, { alpha: 0 })

                .to(arrowsNA, {
                    alpha: 0,
                    duration: .5,
                    ease: 'power2.out',
                }, '>')
                .to(arrowsFinal, {
                    rotateZ: 0,
                    duration: .7,
                    ease: 'power3.inOut',
                    stagger: .05,
                    onComplete: () => {

                        const tl = gsap.timeline({
                            onComplete: () => {
                                S.hide();
                            }
                        });
                        tl.add('moveFinal', 0);

                        arrowsFinal.forEach((arrow, i) => {
                            const arrowFrom = arrowsFinal[i];
                            const arrowTo = arrowsHeader[i];

                            const rcFrom = arrowFrom.getBoundingClientRect();
                            const rcTo = arrowTo.getBoundingClientRect();
                            const offX = rcTo.x - rcFrom.x;
                            const offY = rcTo.y - rcFrom.y;

                            tl
                                .to(arrowFrom, {
                                    x: '+=' + offX,
                                    y: '+=' + offY,
                                    duration: .7,
                                    ease: 'quad.inOut',
                                }, 'moveFinal+=' + i * .02)
                                .to(arrowFrom, {
                                    alpha: 0,
                                    duration: .5,
                                    ease: 'sine.out',
                                }, '>')
                                .to(arrowTo, {
                                    alpha: 1,
                                    duration: .1,
                                    ease: 'sine.out',
                                }, '<')
                        });

                        tl.add('hdrTitle', 'moveFinal+=' + .2);
                        tl.set(headerTitle, { alpha: 1 }, 'hdrTitle');
                        headerTitleSplit.lines.forEach((line, i) => {
                            tl.from(line.querySelectorAll('.words'), {
                                duration: 1.0,
                                yPercent: 100,
                                ease: 'power3.out',
                            }, 'hdrTitle+=' + .15 * i);
                        });

                    },
                }, '<')
                .to(bg, {
                    alpha: 0,
                    duration: 1,
                    ease: 'power2.out',
                }, '<')

        
        }

	setTimeout(function() {
		if (isDesktop || isTablet) {
			$('.show-sticky-nav').click();
		}
		$('body').css('overflow', 'auto');
	}, delayInMilliseconds);
	// show after init
	wrap.css('opacity', 1);
    }

    function initHashNav(shouldPlayIntro) {
        window.addEventListener('hashchange', (e) => {
            tryNav();
        });

        if (!shouldPlayIntro) tryNav();

        function tryNav() {
            const hash = location.hash.substring(1);
            if (HASHES.includes(hash)) {
                const section = $(`#s-${hash}`)[0];
                // console.log('trying ' + section);
                section.scrollIntoView();
                // section.scrollIntoView({ behavior: 'smooth' });
            }
        }
    }

    function init__News() {
        const S = $('.hp-news-list');

        const lines = S.find('.hp-news-item__line');
        const icons = S.find('.hp-news-item__icon');
        const labels = S.find('.hp-news-item__label');

        const tl = gsap.timeline();
        const STG = .1;

        tl
            .from(lines, {
                scaleX: 0,
                duration: 1,
                ease: 'quad.out',
                stagger: STG,
            }, '<')
            .from(icons, {
                x: -30,
                alpha: 0,
                duration: .6,
                ease: 'expo.out',
                stagger: STG,
            }, '<10%')
            .from(labels, {
                alpha: 0,
                duration: .7,
                ease: 'circ.out',
                stagger: STG,
            }, '<10%')

        ScrollTrigger.create({
            id: 'news',
            refreshPriority: REFRESH_PRIORITIES['news'],
            trigger: S,
            animation: tl,
            // markers: true,
            start: 'top 70%',
            end: 'bottom 70%',
        });
    }

    function init__Forward() {
        const S = $('.s-hp-forward');

        const cards = S.find('.hp-fwd-card');
        const photos = S.find('.hp-fwd-card__photo');
        const texts = S.find('.hp-fwd-card__text');

        const tl = gsap.timeline();

        if (isDesktop) { // ---------------------------------------- Desktop        

            cards.each((i, card) => {

                const slideStart = 'slide' + i;

                tl
                    .add(slideStart, '>')

                    .from(cards[i], {
                        yPercent: 100,
                        duration: 1,
                        ease: 'none',
                    }, slideStart)
                    .from(photos[i], {
                        yPercent: 5,
                        scale: .8,
                        duration: 1,
                        ease: 'quad.inOut',
                    }, '<')
                    .from(texts[i], {
                        yPercent: -40,
                        duration: 1,
                        ease: 'quad.out',
                    }, '<')

                if (i > 0) {
                    tl
                        .to(cards[i - 1], {
                            yPercent: -10,
                            duration: .5,
                            ease: 'quad.out',
                        }, slideStart)
                        .to(photos[i - 1], {
                            scale: 1.1,
                            yPercent: -20,
                            duration: 1,
                            ease: 'quad.out',
                        }, '<')
                        .to(texts[i - 1], {
                            yPercent: -60,
                            duration: 1,
                            ease: 'quad.out',
                        }, '<')
                }
            });


            ScrollTrigger.create({
                id: 'forward',
                refreshPriority: REFRESH_PRIORITIES['forward'],
                trigger: S,
                animation: tl,
                pin: true,
                scrub: .5,
                // markers: true,
                start: '0% 0%',
                end: 'bottom+=250% 100%',
            });

        } else { // -------------------------------------------------- Mobile

            const textBodies = S.find('.hp-fwd-card__body');
            const TOP_BAR_HEIGHT = 80 - 1;
            const VMIN = Math.min(window.innerWidth, window.innerHeight) / 100;


            const bodyH = textBodies[0].offsetHeight; // all jave the same height
            const effectiveH = (bodyH - 12 * VMIN); // -top mask gradient padding 

            const DUR_BASE = 1;

            let lastDur = 0;

            cards.each((i, card) => {

                const slideStart = 'slide' + i;

                tl
                    // .add(slideStart, '>')
                    .add(slideStart)

                    .fromTo(cards[i], {
                        y: window.innerHeight * 1.1,
                    }, {
                        y: TOP_BAR_HEIGHT,
                        duration: DUR_BASE * 1.5,
                        ease: 'none',
                    }, slideStart)
                    .from(photos[i], {
                        yPercent: 5,
                        scale: .8,
                        duration: DUR_BASE * 1.5,
                        ease: 'quad.inOut',
                    }, '<')
                    .from(texts[i], {
                        yPercent: 10,
                        duration: DUR_BASE * 1.5,
                        ease: 'quad.out',
                    }, '<')

                const textH = texts[i].offsetHeight + 40;
                const offs = effectiveH - textH;

                if (offs < 0) {
                    lastDur = Math.abs(offs) * .005 * DUR_BASE;
                    tl
                        .to(texts[i], {
                            y: offs,
                            duration: lastDur,
                            ease: 'none',
                        }, '>')
                } else {
                    lastDur = 0;
                }

                if (i > 0) {
                    tl
                        .to(cards[i - 1], {
                            yPercent: -20,
                            duration: .5 * DUR_BASE,
                            ease: 'quad.out',
                        }, slideStart)
                        .to(photos[i - 1], {
                            scale: 1.1,
                            yPercent: -20,
                            duration: DUR_BASE,
                            ease: 'quad.out',
                        }, '<')
                        .to(texts[i - 1], {
                            yPercent: -30,
                            duration: DUR_BASE,
                            ease: 'quad.out',
                        }, '<')
                }
            });

            ScrollTrigger.create({
                id: 'forward',
                refreshPriority: REFRESH_PRIORITIES['forward'],
                trigger: S,
                animation: tl,
                pin: true,
                scrub: .5,
                // markers: true,
                start: '0% 0%',
                end: 'bottom+=625% 100%',
            });

        }
    }

    function init__Meet() {
        const S = $('.s-hp-meet-comm');

        const box1 = S.find('.mc-scr__black');
        const box2 = S.find('.mc-scr__beige');
        const heading = S.find('.meet-comm__heading');
        const marquee = S.find('.mc-scr__marquee');
        const cards = S.find('.mc-scr-card');
        const card0 = cards[0];
        const card1 = cards[1];
        const card2 = cards[2];

        const line_mq = S.find('.mc-scr__marquee-line');
        const mq_blocks = S.find('.mc-scr__marquee-block');
        const line_c1_top = $(card1).find('.mc-scr-card__title-line')[0];
        const line_c1_bottom = $(card1).find('.mc-scr-card__title-line')[1];
        const line_c2_top = $(card2).find('.mc-scr-card__title-line')[0];
        const line_c2_bottom = $(card2).find('.mc-scr-card__title-line')[1];

        const EM = 30;
        const marqueeH = 2.6 * EM - 2;
        const cardTitleH = 2.3 * EM;
        const WH = window.innerHeight;
        const cardSpaceH = (WH - marqueeH);

        if (isDesktop) { // ---------------------------------------- Desktop

            gsap.set(card1, { y: cardSpaceH - cardTitleH * 2 });
            gsap.set(card2, { y: cardSpaceH - cardTitleH * 2 });

            const tl = gsap.timeline()
                .add('start', 0)
                .from(box2, {
                    duration: 1,
                    x: '73vw',
                    ease: 'power2.inOut',
                }, 'start')
                .from(heading, {
                    duration: 1,
                    x: '90vw',
                    ease: 'power2.inOut',
                }, '<+' + .03)

                .add('scene2', '>+' + .15)

                .to([box1, box2], {
                    duration: 1,
                    x: '-100vw',
                    ease: 'power2.inOut',
                }, 'scene2')
                .to(heading, {
                    duration: 1,
                    x: '-100vw',
                    ease: 'power2.inOut',
                }, '<+' + .07)

                .add('cardsIn', '>-' + .8)

                .add(() => { $(':root').removeClass('dark-mode').addClass('light-mode-varient'); }, 'start+=' + 1.1)
                .add(() => { $(':root').addClass('dark-mode').removeClass('light-mode-varient'); }, '>+' + .05)

                .to(line_mq, {
                    duration: 1,
                    x: '-100vw',
                    ease: 'power1.inOut',
                }, 'cardsIn')
                .to(line_c1_bottom, {
                    duration: 1,
                    x: '-100vw',
                    ease: 'power1.inOut',
                }, '<+' + .1)
                .to(line_c1_top, {
                    duration: 1,
                    x: '-100vw',
                    ease: 'power1.inOut',
                }, '<+' + .1)
                .to(mq_blocks, {
                    duration: 2.9,
                    xPercent: -150,
                    ease: 'none',
                }, 'cardsIn+=' + .9) // start after it's _almost_ show fully

                .from([card0, marquee], {
                    duration: 1,
                    x: '100vw',
                    ease: 'power2.inOut',
                }, 'cardsIn+=' + .03)
                .from(card1, {
                    duration: 1,
                    x: '100vw',
                    ease: 'power2.inOut',
                }, '<+' + .1)
                .from(card2, {
                    duration: 1,
                    x: '100vw',
                    ease: 'power2.inOut',
                }, '<+' + .1)

                .add('cardsUp', '>' + .3)

                .to(card1, {
                    duration: 1,
                    y: 0,
                    ease: 'power2.inOut',
                }, 'cardsUp')
                .to($(card0).find('.mc-scr-card__left'), {
                    duration: 1,
                    yPercent: -200,
                    ease: 'power2.inOut',
                }, '<')
                .from($(card1).find('.mc-scr-card__body-wrap > *'), {
                    duration: 1,
                    yPercent: +300,
                    ease: 'power2.inOut',
                    stagger: .1,
                }, '<')

                .to(card2, {
                    duration: 1,
                    y: 0,
                    ease: 'power2.inOut',
                }, '>')
                .to($(card1).find('.mc-scr-card__body-wrap > *'), {
                    duration: 1,
                    yPercent: -180,
                    ease: 'power2.inOut',
                    stagger: .1,
                }, '<')
                .from($(card2).find('.mc-scr-card__body-wrap > *'), {
                    duration: 1,
                    yPercent: +300,
                    ease: 'power2.inOut',
                    stagger: .1,
                }, '<')


            ScrollTrigger.create({
                id: 'meet',
                refreshPriority: REFRESH_PRIORITIES['meet'],
                trigger: S,
                animation: tl,
                pin: true,
                scrub: true,
                // markers: true,
                start: '0% 0%',
                end: 'bottom+=600% 100%',
                // toggleActions: 'play reverse play reverse',
            });

            ScrollTrigger.create({
                id: 'meet-after',
                refreshPriority: REFRESH_PRIORITIES['meet-after'],
                trigger: S,
                animation: gsap.timeline()
                    .add(() => { $(':root').addClass('dark-mode'); })
                    .add(() => { $(':root').removeClass('dark-mode'); }, '>+' + .05),
                scrub: true,
                // markers: true,
                start: 'bottom 80%',
                end: 'bottom+=10% 80%',
                // toggleActions: 'play reverse play reverse',
            });

            // reveal pre-hidden (for initialization) section
            gsap.to(S, { alpha: 1, duration: 1, ease: 'sine.out' });

        } else { // -------------------------------------------------- Mobile

            ScrollTrigger.create({
                id: 'meet',
                refreshPriority: REFRESH_PRIORITIES['meet'],
                trigger: S.find('.meet-comm__scr-2'),
                pin: marquee,
                pinSpacing: false,
                // pinReparent: true,
                // scrub: true,
                // markers: true,
                start: 'top 0%',
                end: 'bottom 50%',
                // toggleActions: 'play reverse play reverse',
            });

            ScrollTrigger.create({
                id: 'meetBox',
                refreshPriority: REFRESH_PRIORITIES['meet'] - 1,
                trigger: box1,
                animation: gsap.timeline()
                    .from(box2, {
                        duration: 1,
                        x: '73vw',
                        ease: 'power2.inOut',
                    }),
                scrub: .5,
                // markers: true,
                start: 'top 100%',
                end: 'bottom 35%',
                // toggleActions: 'play reverse play reverse',
            });


        }
	jQuery('.pin-spacer-meet').append('<div id="s-meet-the-team"></div>');
    }

    function init__Projects() {
        const S = $('.s-hp-results');

        const cards = S.find('.hp-res-card');

        cards.each((i, card) => {
            card = $(card);

            const imgCont = card.find('.hp-res-card__img-link');
            const img = card.find('.hp-res-card__img');
            const line = card.find('.hp-res-card__line');
            const cats = card.find('.hp-res-card__cat');
            const year = card.find('.hp-res-card__year');
            const texts2 = card.find('.hp-res-card__name');

            const splitYear = new SplitText(year, { type: 'words, lines', wordsClass: 'words', linesClass: 'lines' });
            const splitName = new SplitText(texts2, { type: 'words, lines', wordsClass: 'words', linesClass: 'lines' });

            const tl = gsap.timeline()
                .from(img, {
                    duration: 1,
                    alpha: 0,
                    scale: 1.2,
                    ease: 'power2.inOut',
                }, 'start')
                .from(line, {
                    duration: 1,
                    scale: 0,
                    ease: 'power2.out',
                }, 'start')
                .from([...cats, ...splitYear.words], {
                    duration: .5,
                    yPercent: 100,
                    ease: 'power2.out',
                    stagger: 0.1,
                }, '<+' + .2)
                .from(splitName.words, {
                    duration: .7,
                    yPercent: 100,
                    ease: 'power3.out',
                    // stagger: 0.1,
                }, '>-' + .2);

            ScrollTrigger.create({
                id: 'proj_' + i,
                refreshPriority: REFRESH_PRIORITIES['proj_'],
                trigger: card,
                animation: tl,
                // markers: true,
                start: '0% 60%',
                end: '100% 60%',
                // toggleActions: 'play reverse play reverse',
            });

        });

    }

    function init__Different() {
        const S = $('.s-hp-different');

        // ---------- circles
        const circles = S.find('.hp-diff-circle');

        ScrollTrigger.create({
            refreshPriority: REFRESH_PRIORITIES['circles'],
            trigger: S.find('.hp-diff-circles'),
            animation: gsap.timeline()
                .from(circles[0], {
                    duration: 1,
                    xPercent: -30,
                    ease: 'none',
                })
                .from(circles[1], {
                    duration: 1,
                    xPercent: +30,
                    ease: 'none',
                }, '<'),
            // markers: true,
            scrub: 1,
            start: '0% 90%',
            end: '50% 30%',
            // toggleActions: 'play reverse play reverse',
        });

        if (isDesktop) { // ---------------------------------------- Desktop        

            // ---------- cards
            const cards = S.find('.hp-diff-card').toArray();
            const card1 = cards.shift();
            // gsap.set(cards, { position: 'absolute', top: 0, left: 0 });
            const tl = gsap.timeline();
            const SLIDE_TIME = 1;

            const offsetNormal = window.innerWidth * 1; // 110vw
            const offsetFirst = card1.offsetWidth + 20;
            const durationNormal = SLIDE_TIME; // 110vw
            const offK = (offsetFirst / offsetNormal);
            const durationFirst = durationNormal * offK;
            const durDiff = durationNormal - durationFirst;

            let durLast = 0;
            $(cards).each((i, card) => {
                const fromX = (i == 0) ? offsetFirst : offsetNormal;
                const duration = (i == 0) ? durationFirst : durationNormal;
                let delay = (i == 0) ? 0 : .235 * durationNormal;

                if (i == 1) delay += .01 * durDiff;

                durLast -= delay;

                const pos = 'pos_' + i;
                tl
                    .add(pos, durLast)
                    .fromTo(card, {
                        x: fromX,
                    }, {
                        x: 0,
                        duration: duration,
                        ease: 'none',
                    }, pos);

                durLast += duration;

                // return;
                const prevCard = $(i == 0 ? card1 : cards[i - 1]);
                const cNum = prevCard.find('.hp-diff-card__num')[0];
                const cTitle = prevCard.find('.hp-diff-card__title')[0];
                const cText = prevCard.find('.hp-diff-card__text')[0];

                if (cNum)
                    tl
                    .add('hidePrev', pos + '+=' + duration * .2)
                    .to(cNum, {
                        x: -50,
                        alpha: .15,
                        duration: duration * .8,
                        ease: 'sine.out',
                    }, 'hidePrev')
                if (cTitle)
                    tl
                    .to(cTitle, {
                        x: -50,
                        alpha: .15,
                        duration: duration * .8,
                        ease: 'sine.out',
                    }, '<+5%')
                if (cText)
                    tl
                    .fromTo(cText, {
                        x: 0,
                        alpha: 1,
                    }, {
                        x: -250,
                        alpha: .15,
                        duration: duration * .8,
                        ease: 'sine.out',
                    }, '<+5%');

                tl
                    .add(setTitle.bind(this, i), 'hidePrev')
                    .add(setTitle.bind(this, i + 1), '>+=' + .1);
            });

            ScrollTrigger.create({
                id: 'cards',
                refreshPriority: REFRESH_PRIORITIES['cards'],
                trigger: S.find('.hp-diff-cards'),
                animation: tl,
                // markers: true,
                scrub: true,
                pin: true,
                start: 'bottom+=80px 100%',
                end: '600% 100%',
                // toggleActions: 'play reverse play reverse',
            });

            const titles = S.find('.hp-diff-card-tab');

            function setTitle(i) {
                titles.removeClass('is--active');
                if (i >= 0 && i < titles.length) {
                    $(titles[i]).addClass('is--active');
                }
            }

        } else { // -------------------------------------------------- Mobile
            // ---------- cards
            const cards = S.find('.hp-diff-card').toArray();
            cards.shift();
            // gsap.set(cards, { position: 'absolute', inset: 0 });
            const tl = gsap.timeline();
            const SLIDE_TIME = 1;

            $(cards).each((i, card) => {

                const pos = 'pos_' + i;
                tl
                    .add(pos)

                    .from(cards[i], {
                        yPercent: 100,
                        duration: SLIDE_TIME,
                        ease: 'none',
                    }, pos)

            });

            ScrollTrigger.create({
                id: 'cards',
                refreshPriority: REFRESH_PRIORITIES['cards'],
                trigger: S.find('.hp-diff-cards'),
                animation: tl,
                // markers: true,
                scrub: .5,
                pin: true,
                // pinReparent: true, // was needed to remove weird jumps (see docs)
                start: 'bottom 100%',
                end: '400% 100%',
                // toggleActions: 'play reverse play reverse',
            });

        }
    }

    function initTitles() {
        const titles = $('.c-section-title');

        titles.each((i, title) => {

            const split = new SplitText(title, { type: 'words, lines', wordsClass: 'words', linesClass: 'lines' });
            const tl = gsap.timeline();

            split.lines.forEach((line, i) => {
                tl.from(line.querySelectorAll('.words'), {
                    duration: 1.0,
                    yPercent: 100,
                    ease: 'power3.out',
                }, '<+' + .15 * i);
            });

            ScrollTrigger.create({
                id: 'title_' + i,
                refreshPriority: REFRESH_PRIORITIES['title_' + i],
                trigger: title,
                animation: tl,
                // markers: true,
                // scrub: true,
                start: '0% 70%',
                end: '100% 30%',
                // toggleActions: 'play reverse play reverse',
            });
        });

    }

    // ------------------------------ Cookie Helpers ------------------------------

    function setCookie(name, value, days) {
        var expires = "";
        if (days) {
            var date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = "; expires=" + date.toUTCString();
        }
        document.cookie = name + "=" + (value || "") + expires + "; path=/";
    }

    function getCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(";");
        for (var i = 0; i < ca.length; i++) {
            var c = ca[i];
            while (c.charAt(0) == " ") c = c.substring(1, c.length);
            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }
        return null;
    }

});